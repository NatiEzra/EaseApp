Index: app/src/main/java/com/example/easeapp/ui/activities/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ease.ui.activities\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.MenuItem\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.activity.OnBackPressedCallback\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.activity.viewModels\r\nimport androidx.appcompat.app.ActionBarDrawerToggle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.core.view.ViewCompat\r\nimport androidx.core.view.WindowInsetsCompat\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.lifecycle.lifecycleScope\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.example.ease.R\r\nimport com.example.ease.model.local.AppDatabase\r\nimport com.example.ease.model.local.UserEntity\r\nimport com.example.ease.viewmodel.UserViewModel\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.squareup.picasso.MemoryPolicy\r\nimport com.squareup.picasso.NetworkPolicy\r\nimport com.squareup.picasso.Picasso\r\nimport kotlinx.coroutines.launch\r\nimport jp.wasabeef.picasso.transformations.CropCircleTransformation\r\n\r\nclass MainActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {\r\n\r\n    private lateinit var navController: NavController\r\n    private lateinit var drawerLayout: DrawerLayout\r\n    private lateinit var navView: NavigationView\r\n    private lateinit var toggle: ActionBarDrawerToggle\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        enableEdgeToEdge()\r\n        setContentView(R.layout.activity_main)\r\n\r\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.drawer_layout)) { v, insets ->\r\n            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())\r\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)\r\n            insets\r\n        }\r\n\r\n        navController =\r\n            supportFragmentManager.findFragmentById(R.id.nav_host_fragment)?.findNavController()\r\n                ?: throw IllegalStateException(\"NavController not found\")\r\n\r\n        drawerLayout = findViewById(R.id.drawer_layout)\r\n        navView = findViewById(R.id.nav_view)\r\n        toggle =\r\n            ActionBarDrawerToggle(this, drawerLayout, R.string.open_drawer, R.string.close_drawer)\r\n        drawerLayout.addDrawerListener(toggle)\r\n        toggle.syncState()\r\n\r\n        findViewById<ImageView>(R.id.menu_icon).setOnClickListener {\r\n            drawerLayout.openDrawer(GravityCompat.END)\r\n        }\r\n\r\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n        navView.setNavigationItemSelectedListener(this)\r\n\r\n        onBackPressedDispatcher.addCallback(this, object : OnBackPressedCallback(true) {\r\n            override fun handleOnBackPressed() {\r\n                if (navController.currentDestination?.id != R.id.homePageFragment) {\r\n                    navController.navigate(R.id.homePageFragment)\r\n                } else {\r\n                    finish()\r\n                }\r\n            }\r\n        })\r\n\r\n        refreshProfile()\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return if (toggle.onOptionsItemSelected(item)) true\r\n        else super.onOptionsItemSelected(item)\r\n    }\r\n\r\n    override fun onNavigationItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.nav_home -> navController.navigate(R.id.homePageFragment)\r\n            R.id.nav_profile -> navController.navigate(R.id.myProfileFragment)\r\n            R.id.nav_privacy -> {\r\n                // TODO: navController.navigate(R.id.privacyFragment)\r\n            }\r\n\r\n            R.id.nav_about -> {\r\n                // TODO: navController.navigate(R.id.aboutFragment)\r\n            }\r\n        }\r\n        drawerLayout.closeDrawers()\r\n        return true\r\n    }\r\n\r\n    fun editProfileButtonClicked() {\r\n        navController.navigate(R.id.editProfileFragment)\r\n    }\r\n\r\n    fun myProfilePageButtonClicked() {\r\n        navController.navigate(R.id.myProfileFragment)\r\n    }\r\n\r\n    fun navigateToLogin() {\r\n        val intent = Intent(this, LoginRegisterActivity::class.java)\r\n        intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK\r\n        startActivity(intent)\r\n        finish()\r\n    }\r\n\r\n    fun refreshProfile() {\r\n        val headerView = navView.getHeaderView(0)\r\n        val headerProfileImage = headerView.findViewById<ImageView>(R.id.header_profile_image)\r\n        val headerUserName = headerView.findViewById<TextView>(R.id.header_user_name)\r\n        val headerUserEmail = headerView.findViewById<TextView>(R.id.header_user_email)\r\n\r\n        lifecycleScope.launch {\r\n            val user: UserEntity? = AppDatabase.getInstance(this@MainActivity).userDao().getCurrentUser()\r\n            if (user != null) {\r\n                headerUserName.text = user.name\r\n                headerUserEmail.text = user.email\r\n                if (!user.profileImageUrl.isNullOrEmpty()) {\r\n                    val fixedUrl = fixImageUrl(user.profileImageUrl) + \"?t=\" + System.currentTimeMillis()\r\n                    Picasso.get()\r\n                        .invalidate(fixedUrl)\r\n                    Picasso.get()\r\n                        .load(fixedUrl)\r\n                        .networkPolicy(NetworkPolicy.NO_CACHE, NetworkPolicy.NO_STORE)\r\n                        .memoryPolicy(MemoryPolicy.NO_CACHE, MemoryPolicy.NO_STORE)\r\n                        .transform(CropCircleTransformation())\r\n                        .into(headerProfileImage)\r\n                } else {\r\n                    headerProfileImage.setImageResource(R.drawable.ic_placeholder)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n    fun fixImageUrl(oldUrl: String): String {\r\n        return oldUrl.replace(\"http://localhost:\", \"http://10.0.2.2:\")\r\n    }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/easeapp/ui/activities/MainActivity.kt b/app/src/main/java/com/example/easeapp/ui/activities/MainActivity.kt
--- a/app/src/main/java/com/example/easeapp/ui/activities/MainActivity.kt	(revision 969dcc3df400da8fa8471f1e22add71e83d5a976)
+++ b/app/src/main/java/com/example/easeapp/ui/activities/MainActivity.kt	(date 1743952096310)
@@ -4,7 +4,6 @@
 import android.os.Bundle
 import android.view.MenuItem
 import android.widget.ImageView
-import android.widget.TextView
 import androidx.activity.OnBackPressedCallback
 import androidx.activity.enableEdgeToEdge
 import androidx.activity.viewModels
@@ -22,15 +21,12 @@
 import com.example.ease.model.local.UserEntity
 import com.example.ease.viewmodel.UserViewModel
 import com.google.android.material.navigation.NavigationView
-import com.squareup.picasso.MemoryPolicy
-import com.squareup.picasso.NetworkPolicy
-import com.squareup.picasso.Picasso
 import kotlinx.coroutines.launch
-import jp.wasabeef.picasso.transformations.CropCircleTransformation
 
 class MainActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {
 
     private lateinit var navController: NavController
+    private val userViewModel: UserViewModel by viewModels()
     private lateinit var drawerLayout: DrawerLayout
     private lateinit var navView: NavigationView
     private lateinit var toggle: ActionBarDrawerToggle
@@ -46,14 +42,12 @@
             insets
         }
 
-        navController =
-            supportFragmentManager.findFragmentById(R.id.nav_host_fragment)?.findNavController()
-                ?: throw IllegalStateException("NavController not found")
+        navController = supportFragmentManager.findFragmentById(R.id.nav_host_fragment)?.findNavController()
+            ?: throw IllegalStateException("NavController not found")
 
         drawerLayout = findViewById(R.id.drawer_layout)
         navView = findViewById(R.id.nav_view)
-        toggle =
-            ActionBarDrawerToggle(this, drawerLayout, R.string.open_drawer, R.string.close_drawer)
+        toggle = ActionBarDrawerToggle(this, drawerLayout, R.string.open_drawer, R.string.close_drawer)
         drawerLayout.addDrawerListener(toggle)
         toggle.syncState()
 
@@ -61,6 +55,7 @@
             drawerLayout.openDrawer(GravityCompat.END)
         }
 
+
         supportActionBar?.setDisplayHomeAsUpEnabled(true)
         navView.setNavigationItemSelectedListener(this)
 
@@ -74,7 +69,7 @@
             }
         })
 
-        refreshProfile()
+
     }
 
     override fun onOptionsItemSelected(item: MenuItem): Boolean {
@@ -89,7 +84,6 @@
             R.id.nav_privacy -> {
                 // TODO: navController.navigate(R.id.privacyFragment)
             }
-
             R.id.nav_about -> {
                 // TODO: navController.navigate(R.id.aboutFragment)
             }
@@ -113,35 +107,8 @@
         finish()
     }
 
+
     fun refreshProfile() {
-        val headerView = navView.getHeaderView(0)
-        val headerProfileImage = headerView.findViewById<ImageView>(R.id.header_profile_image)
-        val headerUserName = headerView.findViewById<TextView>(R.id.header_user_name)
-        val headerUserEmail = headerView.findViewById<TextView>(R.id.header_user_email)
 
-        lifecycleScope.launch {
-            val user: UserEntity? = AppDatabase.getInstance(this@MainActivity).userDao().getCurrentUser()
-            if (user != null) {
-                headerUserName.text = user.name
-                headerUserEmail.text = user.email
-                if (!user.profileImageUrl.isNullOrEmpty()) {
-                    val fixedUrl = fixImageUrl(user.profileImageUrl) + "?t=" + System.currentTimeMillis()
-                    Picasso.get()
-                        .invalidate(fixedUrl)
-                    Picasso.get()
-                        .load(fixedUrl)
-                        .networkPolicy(NetworkPolicy.NO_CACHE, NetworkPolicy.NO_STORE)
-                        .memoryPolicy(MemoryPolicy.NO_CACHE, MemoryPolicy.NO_STORE)
-                        .transform(CropCircleTransformation())
-                        .into(headerProfileImage)
-                } else {
-                    headerProfileImage.setImageResource(R.drawable.ic_placeholder)
-                }
-            }
-        }
     }
 }
-
-    fun fixImageUrl(oldUrl: String): String {
-        return oldUrl.replace("http://localhost:", "http://10.0.2.2:")
-    }
\ No newline at end of file
Index: app/src/main/java/com/example/easeapp/repositories/AuthRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ease.repositories\r\n\r\nimport android.content.Context\r\nimport android.graphics.Bitmap\r\nimport android.util.Log\r\nimport com.example.ease.model.local.UserEntity\r\nimport com.example.ease.model.local.AppDatabase\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport com.example.ease.model.UserRepository\r\nimport com.example.easeapp.model.requests.LoginRequest\r\nimport com.example.easeapp.model.requests.LoginResponse\r\nimport com.example.easeapp.model.requests.RegisterResponse\r\nimport com.example.easeapp.model.requests.RetrofitClient\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\nimport okhttp3.MediaType.Companion.toMediaTypeOrNull\r\nimport okhttp3.MultipartBody\r\nimport okhttp3.RequestBody.Companion.asRequestBody\r\nimport okhttp3.RequestBody.Companion.toRequestBody\r\nimport java.io.File\r\n\r\ndata class RefreshRequest(\r\n    val refreshToken: String\r\n)\r\n\r\ndata class RefreshResponse(\r\n    val accessToken: String,\r\n    val refreshToken: String\r\n)\r\n\r\nclass AuthRepository {\r\n    companion object {\r\n        val shared = AuthRepository()\r\n    }\r\n\r\n    fun registerUser(\r\n        context: Context,\r\n        username: String,\r\n        email: String,\r\n        password: String,\r\n        bitmap: Bitmap?,\r\n        onComplete: (Boolean, String?) -> Unit\r\n    ) {\r\n        val imageFile = bitmap?.let { bitmapToFile(it, context) }\r\n        val usernamePart = username.toRequestBody(\"text/plain\".toMediaTypeOrNull())\r\n        val emailPart = email.toRequestBody(\"text/plain\".toMediaTypeOrNull())\r\n        val passwordPart = password.toRequestBody(\"text/plain\".toMediaTypeOrNull())\r\n\r\n        val call = if (imageFile != null) {\r\n            val requestFile = imageFile.asRequestBody(\"image/*\".toMediaTypeOrNull())\r\n            val multipartBody = MultipartBody.Part.createFormData(\"profilePicture\", imageFile.name, requestFile)\r\n            RetrofitClient.authApi.registerUser(usernamePart, emailPart, passwordPart, multipartBody)\r\n        } else {\r\n            val emptyRequestFile = \"\".toRequestBody(\"text/plain\".toMediaTypeOrNull())\r\n            val emptyPart = MultipartBody.Part.createFormData(\"profilePicture\", \"\", emptyRequestFile)\r\n            RetrofitClient.authApi.registerUser(usernamePart, emailPart, passwordPart, emptyPart)\r\n        }\r\n\r\n        call.enqueue(object : Callback<RegisterResponse> {\r\n            override fun onResponse(call: Call<RegisterResponse>, response: Response<RegisterResponse>) {\r\n                if (response.isSuccessful) {\r\n                    onComplete(true, response.body()?.message)\r\n                } else {\r\n                    onComplete(false, response.errorBody()?.string() ?: \"Unknown error\")\r\n                }\r\n            }\r\n            override fun onFailure(call: Call<RegisterResponse>, t: Throwable) {\r\n                onComplete(false, t.message ?: \"Network error\")\r\n            }\r\n        })\r\n    }\r\n\r\n    fun bitmapToFile(bitmap: Bitmap, context: Context, fileName: String = \"temp_image.jpg\"): File {\r\n        val file = File(context.cacheDir, fileName)\r\n        file.outputStream().use { out ->\r\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, out)\r\n        }\r\n        return file\r\n    }\r\n\r\n    fun loginUser(\r\n        context: Context,\r\n        email: String,\r\n        password: String,\r\n        onComplete: (Boolean, String?, Any?) -> Unit\r\n    ) {\r\n        val request = LoginRequest(email, password)\r\n        RetrofitClient.authApi.login(request).enqueue(object : Callback<LoginResponse> {\r\n            var callbackCalled = false\r\n\r\n            override fun onResponse(call: Call<LoginResponse>, response: Response<LoginResponse>) {\r\n                if (response.isSuccessful && response.body() != null) {\r\n                    val setCookieHeaders = response.headers()[\"Set-Cookie\"]\r\n                    setCookieHeaders?.let {\r\n                        saveRefreshTokenLocally(context, it)\r\n                        saveAccessTokenLocally(context, it)\r\n                    }\r\n                    val loginResponse = response.body()!!\r\n                    val accessToken = loginResponse.accessToken\r\n                    if (accessToken.isNotEmpty()) {\r\n                        val userEntity = UserEntity(\r\n                            _id = loginResponse._id,\r\n                            email = loginResponse.email,\r\n                            name = loginResponse.username,\r\n                            profileImageUrl = loginResponse.profilePicture,\r\n                            accessToken = accessToken,\r\n                            phoneNumber = loginResponse.phoneNumber,\r\n                            dateOfBirth = loginResponse.dateOfBirth,\r\n                            gender = loginResponse.gender\r\n                        )\r\n                        GlobalScope.launch {\r\n                            AppDatabase.getInstance(context).userDao().insert(userEntity)\r\n                        }\r\n                        if (!callbackCalled) {\r\n                            onComplete(true, null, loginResponse)\r\n                            callbackCalled = true\r\n                        }\r\n                        return\r\n                    } else {\r\n                        if (!callbackCalled) {\r\n                            onComplete(false, \"Invalid login response\", null)\r\n                            callbackCalled = true\r\n                        }\r\n                    }\r\n                } else {\r\n                    val errorBody = response.errorBody()?.string()\r\n                    if (!callbackCalled) {\r\n                        onComplete(false, errorBody ?: \"Login failed\", null)\r\n                        callbackCalled = true\r\n                    }\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call<LoginResponse>, t: Throwable) {\r\n                if (!callbackCalled) {\r\n                    onComplete(false, t.message ?: \"Network error\", null)\r\n                    callbackCalled = true\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    fun saveRefreshTokenLocally(context: Context, cookie: String) {\r\n        val prefs = context.getSharedPreferences(\"auth_prefs\", Context.MODE_PRIVATE)\r\n        prefs.edit().putString(\"refresh_token_cookie\", cookie).apply()\r\n    }\r\n\r\n    fun saveAccessTokenLocally(context: Context, cookie: String) {\r\n        val prefs = context.getSharedPreferences(\"auth_prefs\", Context.MODE_PRIVATE)\r\n        prefs.edit().putString(\"access_token_cookie\", cookie).apply()\r\n    }\r\n\r\n    fun getRefreshToken(context: Context): String? {\r\n        val prefs = context.getSharedPreferences(\"auth_prefs\", Context.MODE_PRIVATE)\r\n        return prefs.getString(\"refresh_token_cookie\", null)\r\n    }\r\n\r\n    fun getAccessToken(context: Context): String? {\r\n        val prefs = context.getSharedPreferences(\"auth_prefs\", Context.MODE_PRIVATE)\r\n        return prefs.getString(\"access_token_cookie\", null)\r\n    }\r\n\r\n    fun signOut(context: Context, onComplete: (Boolean, String?) -> Unit) {\r\n        val prefs = context.getSharedPreferences(\"auth_prefs\", Context.MODE_PRIVATE)\r\n        prefs.edit().remove(\"access_token_cookie\").remove(\"refresh_token_cookie\").apply()\r\n        onComplete(true, null)\r\n    }\r\n\r\n    fun isUserLoggedIn(context: Context): Boolean = getAccessToken(context) != null\r\n\r\n    suspend fun refreshAccessToken(context: Context): String {\r\n        val refreshToken = getRefreshToken(context) ?: return \"\"\r\n        return try {\r\n            val call = RetrofitClient.authApi.refreshToken(RefreshRequest(refreshToken))\r\n            val response = call.execute()\r\n            if (response.isSuccessful && response.body() != null) {\r\n                val newAccessToken = response.body()!!.accessToken\r\n                saveAccessTokenLocally(context, newAccessToken)\r\n                newAccessToken\r\n            } else {\r\n                \"\"\r\n            }\r\n        } catch (e: Exception) {\r\n            \"\"\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/easeapp/repositories/AuthRepository.kt b/app/src/main/java/com/example/easeapp/repositories/AuthRepository.kt
--- a/app/src/main/java/com/example/easeapp/repositories/AuthRepository.kt	(revision 969dcc3df400da8fa8471f1e22add71e83d5a976)
+++ b/app/src/main/java/com/example/easeapp/repositories/AuthRepository.kt	(date 1743952096485)
@@ -3,11 +3,10 @@
 import android.content.Context
 import android.graphics.Bitmap
 import android.util.Log
-import com.example.ease.model.local.UserEntity
-import com.example.ease.model.local.AppDatabase
-import kotlinx.coroutines.GlobalScope
-import kotlinx.coroutines.launch
+import com.example.ease.model.User
 import com.example.ease.model.UserRepository
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.auth.FirebaseUser
 import com.example.easeapp.model.requests.LoginRequest
 import com.example.easeapp.model.requests.LoginResponse
 import com.example.easeapp.model.requests.RegisterResponse
@@ -21,29 +20,19 @@
 import okhttp3.RequestBody.Companion.toRequestBody
 import java.io.File
 
-data class RefreshRequest(
-    val refreshToken: String
-)
-
-data class RefreshResponse(
-    val accessToken: String,
-    val refreshToken: String
-)
-
 class AuthRepository {
-    companion object {
+    companion object{
         val shared = AuthRepository()
     }
+    private val auth: FirebaseAuth = FirebaseAuth.getInstance()
+    private val userRepository= UserRepository.shared
 
-    fun registerUser(
-        context: Context,
-        username: String,
-        email: String,
-        password: String,
-        bitmap: Bitmap?,
-        onComplete: (Boolean, String?) -> Unit
-    ) {
+    val currentUser: FirebaseUser?
+        get() = auth.currentUser
+
+    fun registerUser(context: Context, username: String, email: String, password: String, bitmap: Bitmap?, onComplete: (Boolean, String?) -> Unit) {
         val imageFile = bitmap?.let { bitmapToFile(it, context) }
+
         val usernamePart = username.toRequestBody("text/plain".toMediaTypeOrNull())
         val emailPart = email.toRequestBody("text/plain".toMediaTypeOrNull())
         val passwordPart = password.toRequestBody("text/plain".toMediaTypeOrNull())
@@ -51,10 +40,13 @@
         val call = if (imageFile != null) {
             val requestFile = imageFile.asRequestBody("image/*".toMediaTypeOrNull())
             val multipartBody = MultipartBody.Part.createFormData("profilePicture", imageFile.name, requestFile)
+
             RetrofitClient.authApi.registerUser(usernamePart, emailPart, passwordPart, multipartBody)
         } else {
+            // Send an empty multipart form field with an empty filename and body
             val emptyRequestFile = "".toRequestBody("text/plain".toMediaTypeOrNull())
             val emptyPart = MultipartBody.Part.createFormData("profilePicture", "", emptyRequestFile)
+
             RetrofitClient.authApi.registerUser(usernamePart, emailPart, passwordPart, emptyPart)
         }
 
@@ -66,10 +58,12 @@
                     onComplete(false, response.errorBody()?.string() ?: "Unknown error")
                 }
             }
+
             override fun onFailure(call: Call<RegisterResponse>, t: Throwable) {
                 onComplete(false, t.message ?: "Network error")
             }
         })
+
     }
 
     fun bitmapToFile(bitmap: Bitmap, context: Context, fileName: String = "temp_image.jpg"): File {
@@ -80,110 +74,82 @@
         return file
     }
 
-    fun loginUser(
-        context: Context,
-        email: String,
-        password: String,
-        onComplete: (Boolean, String?, Any?) -> Unit
-    ) {
+
+    fun authenticate(email: String, password: String, onComplete: (Boolean, String?) -> Unit) {
+        auth.signInWithEmailAndPassword(email, password)
+            .addOnCompleteListener { task ->
+                if (task.isSuccessful) {
+                    onComplete(true, null)
+                } else {
+                    onComplete(false, task.exception?.localizedMessage)
+                }
+            }
+    }
+    fun loginUser(email: String, password: String, onComplete: (Boolean, String?, Any?) -> Unit) {
         val request = LoginRequest(email, password)
-        RetrofitClient.authApi.login(request).enqueue(object : Callback<LoginResponse> {
-            var callbackCalled = false
 
-            override fun onResponse(call: Call<LoginResponse>, response: Response<LoginResponse>) {
+        RetrofitClient.authApi.login(request).enqueue(object : retrofit2.Callback<LoginResponse> {
+            override fun onResponse(call: retrofit2.Call<LoginResponse>, response: Response<LoginResponse>) {
                 if (response.isSuccessful && response.body() != null) {
-                    val setCookieHeaders = response.headers()["Set-Cookie"]
-                    setCookieHeaders?.let {
-                        saveRefreshTokenLocally(context, it)
-                        saveAccessTokenLocally(context, it)
-                    }
-                    val loginResponse = response.body()!!
-                    val accessToken = loginResponse.accessToken
-                    if (accessToken.isNotEmpty()) {
-                        val userEntity = UserEntity(
-                            _id = loginResponse._id,
-                            email = loginResponse.email,
-                            name = loginResponse.username,
-                            profileImageUrl = loginResponse.profilePicture,
+                    val loginResponse = response.body() // this is a function call
+                    val accessToken = loginResponse?.accessToken
+                    val userId = loginResponse?._id
+                    if (accessToken != null && userId != null) {
+                        userRepository.getUser(
                             accessToken = accessToken,
-                            phoneNumber = loginResponse.phoneNumber,
-                            dateOfBirth = loginResponse.dateOfBirth,
-                            gender = loginResponse.gender
-                        )
-                        GlobalScope.launch {
-                            AppDatabase.getInstance(context).userDao().insert(userEntity)
-                        }
-                        if (!callbackCalled) {
-                            onComplete(true, null, loginResponse)
-                            callbackCalled = true
-                        }
-                        return
-                    } else {
-                        if (!callbackCalled) {
-                            onComplete(false, "Invalid login response", null)
-                            callbackCalled = true
+                            userId = userId,
+                            page = 1
+                        ) { success, user, error ->
+                            if (success && user != null) {
+                                onComplete(true, null, user)
+                                Log.d("USER", "Username: ${user.username}, Profile Pic: ${user.profilePicture}")
+                            } else {
+                                Log.e("ERROR", error ?: "Unknown error")
+                            }
                         }
                     }
+
+                    onComplete(true, null, null)
                 } else {
-                    val errorBody = response.errorBody()?.string()
-                    if (!callbackCalled) {
-                        onComplete(false, errorBody ?: "Login failed", null)
-                        callbackCalled = true
-                    }
+                    onComplete(false, response.errorBody()?.string() ?: "Login failed", null)
                 }
             }
 
-            override fun onFailure(call: Call<LoginResponse>, t: Throwable) {
-                if (!callbackCalled) {
-                    onComplete(false, t.message ?: "Network error", null)
-                    callbackCalled = true
-                }
+            override fun onFailure(call: retrofit2.Call<LoginResponse>, t: Throwable) {
+                onComplete(false, t.message ?: "Network error", null)
             }
         })
     }
 
-    fun saveRefreshTokenLocally(context: Context, cookie: String) {
-        val prefs = context.getSharedPreferences("auth_prefs", Context.MODE_PRIVATE)
-        prefs.edit().putString("refresh_token_cookie", cookie).apply()
-    }
-
-    fun saveAccessTokenLocally(context: Context, cookie: String) {
-        val prefs = context.getSharedPreferences("auth_prefs", Context.MODE_PRIVATE)
-        prefs.edit().putString("access_token_cookie", cookie).apply()
-    }
 
-    fun getRefreshToken(context: Context): String? {
-        val prefs = context.getSharedPreferences("auth_prefs", Context.MODE_PRIVATE)
-        return prefs.getString("refresh_token_cookie", null)
+    fun signOut() {
+        auth.signOut()
     }
-
-    fun getAccessToken(context: Context): String? {
-        val prefs = context.getSharedPreferences("auth_prefs", Context.MODE_PRIVATE)
-        return prefs.getString("access_token_cookie", null)
-    }
-
-    fun signOut(context: Context, onComplete: (Boolean, String?) -> Unit) {
-        val prefs = context.getSharedPreferences("auth_prefs", Context.MODE_PRIVATE)
-        prefs.edit().remove("access_token_cookie").remove("refresh_token_cookie").apply()
-        onComplete(true, null)
-    }
-
-    fun isUserLoggedIn(context: Context): Boolean = getAccessToken(context) != null
-
-    suspend fun refreshAccessToken(context: Context): String {
-        val refreshToken = getRefreshToken(context) ?: return ""
-        return try {
-            val call = RetrofitClient.authApi.refreshToken(RefreshRequest(refreshToken))
-            val response = call.execute()
-            if (response.isSuccessful && response.body() != null) {
-                val newAccessToken = response.body()!!.accessToken
-                saveAccessTokenLocally(context, newAccessToken)
-                newAccessToken
-            } else {
-                ""
-            }
-        } catch (e: Exception) {
-            ""
+    fun changePassword(newPassword: String ,onComplete: (Boolean, String?) -> Unit){
+        val user = auth.currentUser
+        user?.let {
+            user.updatePassword(newPassword)
+                .addOnCompleteListener { task ->
+                    if (task.isSuccessful) {
+                        onComplete(true, null)
+                    } else {
+                        onComplete(false, task.exception?.localizedMessage)
+                    }
+                }
         }
     }
+
+
+    fun isUserLoggedIn(): Boolean = currentUser != null
+    fun getCurrentUserEmail(): String {
+        val email: String
+        if(currentUser!=null){
+            email= currentUser!!.email.toString()
+        }
+        else{
+            email=""
+        }
+        return email
+    }
 }
+
Index: app/src/main/res/drawable/iconttest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/iconttest.xml b/app/src/main/res/drawable/iconttest.xml
new file mode 100644
--- /dev/null	(date 1743952098211)
+++ b/app/src/main/res/drawable/iconttest.xml	(date 1743952098211)
@@ -0,0 +1,11 @@
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/vuesax_line"
+    android:layout_width="0dp"
+    android:layout_height="0dp"
+    android:layout_alignParentLeft="true"
+    android:layout_alignParentRight="true"
+    android:layout_alignParentTop="true"
+    android:layout_alignParentBottom="true"
+    />
+
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(date 1743952098205)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1743952098205)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="AndroidLintUnsafeImplicitIntentLaunch" enabled="true" level="ERROR" enabled_by_default="true" />
+  </profile>
+</component>
\ No newline at end of file
Index: app/src/main/java/com/example/easeapp/model/local/userEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ease.model.local\r\n\r\nimport androidx.room.Entity\r\nimport androidx.room.PrimaryKey\r\n\r\n@Entity(tableName = \"user\")\r\ndata class UserEntity(\r\n    @PrimaryKey val _id: String,\r\n    val email: String,\r\n    val name: String,\r\n    val profileImageUrl: String? = null,\r\n    val accessToken: String? = null,\r\n    val phoneNumber: String? = null,\r\n    val dateOfBirth: String? = null,\r\n    val gender: String? = null\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/easeapp/model/local/userEntity.kt b/app/src/main/java/com/example/easeapp/model/local/userEntity.kt
--- a/app/src/main/java/com/example/easeapp/model/local/userEntity.kt	(revision 969dcc3df400da8fa8471f1e22add71e83d5a976)
+++ b/app/src/main/java/com/example/easeapp/model/local/userEntity.kt	(date 1743952098347)
@@ -5,12 +5,8 @@
 
 @Entity(tableName = "user")
 data class UserEntity(
-    @PrimaryKey val _id: String,
-    val email: String,
+    @PrimaryKey val email: String,
     val name: String,
-    val profileImageUrl: String? = null,
-    val accessToken: String? = null,
-    val phoneNumber: String? = null,
-    val dateOfBirth: String? = null,
-    val gender: String? = null
-)
\ No newline at end of file
+    val profileImageUrl: String? = null
+)
+
Index: app/src/main/java/com/example/easeapp/model/local/AppDatabase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ease.model.local\r\n\r\nimport android.content.Context\r\nimport androidx.room.Database\r\nimport androidx.room.Room\r\nimport androidx.room.RoomDatabase\r\n\r\n@Database(entities = [UserEntity::class], version = 1)\r\nabstract class AppDatabase : RoomDatabase() {\r\n    abstract fun userDao(): UserDao\r\n\r\n    companion object {\r\n        @Volatile\r\n        private var INSTANCE: AppDatabase? = null\r\n\r\n        fun getInstance(context: Context): AppDatabase =\r\n            INSTANCE ?: synchronized(this) {\r\n                INSTANCE ?: Room.databaseBuilder(\r\n                    context.applicationContext,\r\n                    AppDatabase::class.java,\r\n                    \"ease_db\"\r\n                )\r\n                    .fallbackToDestructiveMigration()\r\n                    .build().also { INSTANCE = it }\r\n            }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/easeapp/model/local/AppDatabase.kt b/app/src/main/java/com/example/easeapp/model/local/AppDatabase.kt
--- a/app/src/main/java/com/example/easeapp/model/local/AppDatabase.kt	(revision 969dcc3df400da8fa8471f1e22add71e83d5a976)
+++ b/app/src/main/java/com/example/easeapp/model/local/AppDatabase.kt	(date 1743952100035)
@@ -1,17 +1,26 @@
 package com.example.ease.model.local
 
+
 import android.content.Context
 import androidx.room.Database
 import androidx.room.Room
 import androidx.room.RoomDatabase
+import androidx.room.migration.Migration
+import androidx.sqlite.db.SupportSQLiteDatabase
 
-@Database(entities = [UserEntity::class], version = 1)
+@Database(entities = [UserEntity::class], version = 2)
 abstract class AppDatabase : RoomDatabase() {
     abstract fun userDao(): UserDao
 
     companion object {
-        @Volatile
-        private var INSTANCE: AppDatabase? = null
+        val MIGRATION_1_2 = object : Migration(1, 2) {
+            override fun migrate(database: SupportSQLiteDatabase) {
+                //database.execSQL("ALTER TABLE user ADD COLUMN profileImageUrl TEXT")
+
+            }
+        }
+        @Volatile private var INSTANCE: AppDatabase? = null
+
 
         fun getInstance(context: Context): AppDatabase =
             INSTANCE ?: synchronized(this) {
@@ -20,8 +29,11 @@
                     AppDatabase::class.java,
                     "ease_db"
                 )
+                    .addMigrations(MIGRATION_1_2)
                     .fallbackToDestructiveMigration()
                     .build().also { INSTANCE = it }
             }
+
     }
-}
\ No newline at end of file
+}
+
Index: app/src/main/java/com/example/easeapp/model/requests/authRequests.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.easeapp.model.requests\r\n\r\n// LOGIN\r\ndata class LoginRequest(\r\n    val email: String,\r\n    val password: String\r\n)\r\n\r\ndata class LoginResponse(\r\n    val accessToken: String,\r\n    val refreshToken: String,\r\n    val _id: String,\r\n    val username: String,\r\n    val role: String,\r\n    val isAuthenticated: Boolean,\r\n    val likedPosts: List<String>,\r\n    val gender: String?,\r\n    val dateOfBirth: String?,\r\n    val phoneNumber: String?,\r\n    val profilePicture: String?,\r\n    val email: String\r\n)\r\n\r\n// REGISTER\r\ndata class RegisterRequest(\r\n    val username: String,\r\n    val email: String,\r\n    val password: String\r\n)\r\n\r\ndata class RegisterResponse(\r\n    val message: String,\r\n    val user: RegisteredUser\r\n)\r\n\r\ndata class RegisteredUser(\r\n    val username: String,\r\n    val email: String,\r\n    val _id: String,\r\n    val profilePicture: String,\r\n    val role: String,\r\n    val gender: String?,\r\n    val dateOfBirth: String?,\r\n    val phoneNumber: String?\r\n)\r\n\r\n// GET USER\r\ndata class UserProfileResponse(\r\n    val user: UserDetails\r\n)\r\n\r\ndata class UserDetails(\r\n    val _id: String,\r\n    val username: String,\r\n    val email: String,\r\n    val role: String,\r\n    val profilePicture: String?,\r\n    var accessToken: String,\r\n    val phoneNumber: String?,\r\n    val dateOfBirth: String?,\r\n    val gender: String?\r\n)\r\n\r\n// UPDATE PROFILE\r\ndata class UpdateProfileResponse(\r\n    val message: String,\r\n    val user: UserDetails\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/easeapp/model/requests/authRequests.kt b/app/src/main/java/com/example/easeapp/model/requests/authRequests.kt
--- a/app/src/main/java/com/example/easeapp/model/requests/authRequests.kt	(revision 969dcc3df400da8fa8471f1e22add71e83d5a976)
+++ b/app/src/main/java/com/example/easeapp/model/requests/authRequests.kt	(date 1743952101832)
@@ -1,6 +1,5 @@
 package com.example.easeapp.model.requests
-
-// LOGIN
+//LOGIN
 data class LoginRequest(
     val email: String,
     val password: String
@@ -13,15 +12,9 @@
     val username: String,
     val role: String,
     val isAuthenticated: Boolean,
-    val likedPosts: List<String>,
-    val gender: String?,
-    val dateOfBirth: String?,
-    val phoneNumber: String?,
-    val profilePicture: String?,
-    val email: String
+    val likedPosts: List<String>
 )
-
-// REGISTER
+//REGISTER
 data class RegisterRequest(
     val username: String,
     val email: String,
@@ -38,13 +31,10 @@
     val email: String,
     val _id: String,
     val profilePicture: String,
-    val role: String,
-    val gender: String?,
-    val dateOfBirth: String?,
-    val phoneNumber: String?
+    val role: String
 )
 
-// GET USER
+//GET USER
 data class UserProfileResponse(
     val user: UserDetails
 )
@@ -54,15 +44,8 @@
     val username: String,
     val email: String,
     val role: String,
-    val profilePicture: String?,
-    var accessToken: String,
-    val phoneNumber: String?,
-    val dateOfBirth: String?,
-    val gender: String?
+    val profilePicture: String?
 )
 
-// UPDATE PROFILE
-data class UpdateProfileResponse(
-    val message: String,
-    val user: UserDetails
-)
\ No newline at end of file
+
+
Index: secrets.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>GOOGLE_CLIENT_ID=\"839756644672-gja8ni4skviq8nnoavbtql2091blmtl3.apps.googleusercontent.com\"
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/secrets.properties b/secrets.properties
--- a/secrets.properties	(revision 969dcc3df400da8fa8471f1e22add71e83d5a976)
+++ b/secrets.properties	(date 1743952103667)
@@ -1,1 +1,1 @@
-GOOGLE_CLIENT_ID="839756644672-gja8ni4skviq8nnoavbtql2091blmtl3.apps.googleusercontent.com"
\ No newline at end of file
+GOOGLE_CLIENT_ID="839756644672-gja8ni4skviq8nnoavbtql2091blmtl3.apps.googleusercontent.com"
Index: app/src/main/java/com/example/easeapp/model/User.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ease.model\r\n\r\nimport android.content.Context\r\nimport com.example.ease.repositories.AuthRepository\r\nimport com.example.easeapp.model.requests.RetrofitClientUser\r\nimport com.example.easeapp.model.requests.UserApi\r\nimport com.example.easeapp.model.requests.UserProfileResponse\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\ndata class User(\r\n    val _id: String,\r\n    val username: String,\r\n    var profilePicture: String,\r\n    var role: String,\r\n)\r\n\r\nclass UserRepository(private val context: Context) {\r\n    var auth = AuthRepository.shared\r\n    @Volatile\r\n    var doctors: MutableList<User> = mutableListOf()\r\n\r\n    companion object {\r\n        @Volatile\r\n        private var INSTANCE: UserRepository? = null\r\n\r\n        fun getInstance(context: Context): UserRepository =\r\n            INSTANCE ?: synchronized(this) {\r\n                INSTANCE ?: UserRepository(context.applicationContext).also { INSTANCE = it }\r\n            }\r\n    }\r\n\r\n    private val userApi: UserApi by lazy {\r\n        RetrofitClientUser.create(context).create(UserApi::class.java)\r\n    }\r\n\r\n    fun getAllDoctors(onComplete: (MutableList<User>) -> Unit) {\r\n        userApi.getAllUsers().enqueue(object : Callback<List<User>> {\r\n            override fun onResponse(call: Call<List<User>>, response: Response<List<User>>) {\r\n                if (response.isSuccessful && response.body() != null) {\r\n                    val allUsers = response.body()!!.toMutableList()\r\n                    doctors = mutableListOf()\r\n                    allUsers.forEach { user ->\r\n                        if (user.role == \"doctor\") {\r\n                            doctors.add(user)\r\n                        }\r\n                    }\r\n                    onComplete(doctors)\r\n                } else {\r\n                    onComplete(mutableListOf())\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call<List<User>>, t: Throwable) {\r\n                onComplete(mutableListOf())\r\n            }\r\n        })\r\n    }\r\n\r\n    fun getUser(\r\n        accessToken: String,\r\n        userId: String,\r\n        page: Int = 1,\r\n        onComplete: (Boolean, com.example.easeapp.model.requests.UserDetails?, String?) -> Unit\r\n    ) {\r\n        val authHeader = \"Bearer $accessToken\"\r\n        userApi.getUserProfile(authHeader, userId, page).enqueue(object : Callback<com.example.easeapp.model.requests.UserProfileResponse> {\r\n            override fun onResponse(\r\n                call: Call<com.example.easeapp.model.requests.UserProfileResponse>,\r\n                response: Response<com.example.easeapp.model.requests.UserProfileResponse>\r\n            ) {\r\n                if (response.isSuccessful && response.body() != null) {\r\n                    onComplete(true, response.body()!!.user, null)\r\n                } else {\r\n                    onComplete(false, null, response.errorBody()?.string() ?: \"Failed to fetch profile\")\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call<com.example.easeapp.model.requests.UserProfileResponse>, t: Throwable) {\r\n                onComplete(false, null, t.message ?: \"Network error\")\r\n            }\r\n        })\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/easeapp/model/User.kt b/app/src/main/java/com/example/easeapp/model/User.kt
--- a/app/src/main/java/com/example/easeapp/model/User.kt	(revision 969dcc3df400da8fa8471f1e22add71e83d5a976)
+++ b/app/src/main/java/com/example/easeapp/model/User.kt	(date 1743952103848)
@@ -1,46 +1,45 @@
 package com.example.ease.model
 
-import android.content.Context
+import android.graphics.Bitmap
+import android.util.Log
 import com.example.ease.repositories.AuthRepository
+import com.example.easeapp.model.requests.RetrofitClient
 import com.example.easeapp.model.requests.RetrofitClientUser
-import com.example.easeapp.model.requests.UserApi
+import com.example.easeapp.model.requests.RetrofitClientUser.userApi
+import com.example.easeapp.model.requests.UserDetails
 import com.example.easeapp.model.requests.UserProfileResponse
+import com.google.firebase.firestore.ktx.firestore
+import com.google.firebase.ktx.Firebase
 import retrofit2.Call
 import retrofit2.Callback
 import retrofit2.Response
-
 data class User(
-    val _id: String,
+    val userId: String,
     val username: String,
     var profilePicture: String,
     var role: String,
 )
-
-class UserRepository(private val context: Context) {
+class UserRepository {
     var auth = AuthRepository.shared
     @Volatile
     var doctors: MutableList<User> = mutableListOf()
 
     companion object {
-        @Volatile
-        private var INSTANCE: UserRepository? = null
-
-        fun getInstance(context: Context): UserRepository =
-            INSTANCE ?: synchronized(this) {
-                INSTANCE ?: UserRepository(context.applicationContext).also { INSTANCE = it }
-            }
+        val shared = UserRepository()
     }
 
-    private val userApi: UserApi by lazy {
-        RetrofitClientUser.create(context).create(UserApi::class.java)
-    }
 
-    fun getAllDoctors(onComplete: (MutableList<User>) -> Unit) {
+    val db = Firebase.firestore
+    val cloudinaryModel = CloudinaryModel()
+    fun getAllDoctors( onComplete: (MutableList<User>) -> Unit){
         userApi.getAllUsers().enqueue(object : Callback<List<User>> {
-            override fun onResponse(call: Call<List<User>>, response: Response<List<User>>) {
+            override fun onResponse(
+                call: Call<List<User>>,
+                response: Response<List<User>>
+            ) {
                 if (response.isSuccessful && response.body() != null) {
-                    val allUsers = response.body()!!.toMutableList()
-                    doctors = mutableListOf()
+                    var allUsers=response.body()!!.toMutableList()
+                    doctors= mutableListOf()
                     allUsers.forEach { user ->
                         if (user.role == "doctor") {
                             doctors.add(user)
@@ -56,20 +55,21 @@
                 onComplete(mutableListOf())
             }
         })
+
+
     }
 
     fun getUser(
         accessToken: String,
         userId: String,
         page: Int = 1,
-        onComplete: (Boolean, com.example.easeapp.model.requests.UserDetails?, String?) -> Unit
+        onComplete: (Boolean, UserDetails?, String?) -> Unit
     ) {
         val authHeader = "Bearer $accessToken"
-        userApi.getUserProfile(authHeader, userId, page).enqueue(object : Callback<com.example.easeapp.model.requests.UserProfileResponse> {
-            override fun onResponse(
-                call: Call<com.example.easeapp.model.requests.UserProfileResponse>,
-                response: Response<com.example.easeapp.model.requests.UserProfileResponse>
-            ) {
+
+        RetrofitClientUser.userApi.getUserProfile(authHeader, userId, page).enqueue(object :
+            Callback<UserProfileResponse> {
+            override fun onResponse(call: Call<UserProfileResponse>, response: Response<UserProfileResponse>) {
                 if (response.isSuccessful && response.body() != null) {
                     onComplete(true, response.body()!!.user, null)
                 } else {
@@ -77,9 +77,166 @@
                 }
             }
 
-            override fun onFailure(call: Call<com.example.easeapp.model.requests.UserProfileResponse>, t: Throwable) {
+            override fun onFailure(call: Call<UserProfileResponse>, t: Throwable) {
                 onComplete(false, null, t.message ?: "Network error")
             }
         })
     }
-}
\ No newline at end of file
+
+    fun getUserByEmail(email: String, onComplete: (Map<String, Any>?) -> Unit) {
+        db.collection("users")
+            .whereEqualTo("email", email)
+            .get()
+            .addOnSuccessListener { documents ->
+                if (!documents.isEmpty) {
+                    val userDocument = documents.documents[0]
+                    val userData = userDocument.data
+                    onComplete(userData)
+                } else {
+                    onComplete(null)
+                }
+            }
+            .addOnFailureListener { e ->
+                onComplete(null)
+            }
+    }
+    fun getProfileImage(onComplete: (String?) -> Unit) {
+
+    }
+
+    fun editUser(currentPassword: String, name: String, password: String, image: Bitmap?, onComplete: (Boolean, String?) -> Unit) {
+        val userEmail = auth.currentUser?.email
+        if (userEmail != null && currentPassword.isNotEmpty()) {
+            auth.authenticate(userEmail, currentPassword) { success, error ->
+                if (success) {
+                    db.collection("users")
+                        .whereEqualTo("email", userEmail)
+                        .get()
+                        .addOnSuccessListener { documents ->
+                            if (!documents.isEmpty) {
+                                val userDocument = documents.documents[0]
+                                val documentReference = userDocument.reference
+                                var updateCount = 0
+                                var totalUpdates = 0
+                                var hasError = false
+
+                                // Count the number of updates needed
+                                if (password.isNotEmpty()) totalUpdates++
+                                if (name.isNotEmpty()) totalUpdates++
+                                if (image != null) totalUpdates++
+
+                                // Function to check completion
+                                fun checkCompletion() {
+                                    if (updateCount == totalUpdates && !hasError) {
+                                        onComplete(true, null)
+                                    } else if (hasError) {
+                                        onComplete(false, "An error occurred while updating the profile.")
+                                    }
+                                }
+
+                                // Update password if it's not empty
+                                if (password.isNotEmpty()) {
+                                    auth.changePassword(password) { success, error ->
+                                        if (success) {
+                                            Log.d("Firestore", "Password changed")
+                                        } else {
+                                            hasError = true
+                                        }
+                                        updateCount++
+                                        checkCompletion()
+                                    }
+                                }
+
+                                // Update name if it's not empty
+                                if (name.isNotEmpty()) {
+                                    documentReference.update("name", name)
+                                        .addOnSuccessListener {
+                                            Log.d("Firestore", "Name updated")
+                                            updateCount++
+                                            checkCompletion()
+                                        }
+                                        .addOnFailureListener { e ->
+                                            hasError = true
+                                            updateCount++
+                                            checkCompletion()
+                                        }
+                                }
+
+                                // Update image if it's not null
+                                if (image != null) {
+                                    val previousImageUrl = userDocument.getString("image")
+                                    val uploadImage = { bitmap: Bitmap ->
+                                        uploadImageToCloudinary(bitmap, auth.getCurrentUserEmail(), { uri ->
+                                            if (!uri.isNullOrBlank()) {
+                                                documentReference.update("image", uri)
+                                                    .addOnSuccessListener {
+                                                        Log.d("Firestore", "Image updated")
+                                                        updateCount++
+                                                        checkCompletion()
+                                                    }
+                                                    .addOnFailureListener { e ->
+                                                        hasError = true
+                                                        updateCount++
+                                                        checkCompletion()
+                                                    }
+                                            } else {
+                                                hasError = true
+                                                updateCount++
+                                                checkCompletion()
+                                            }
+                                        }, { error ->
+                                            hasError = true
+                                            updateCount++
+                                            checkCompletion()
+                                        })
+                                    }
+
+                                    if (!previousImageUrl.isNullOrEmpty()) {
+                                        cloudinaryModel.deleteImage(previousImageUrl) { deleteSuccess, deleteError ->
+                                            if (deleteSuccess) {
+                                                uploadImage(image)
+                                            } else {
+                                                hasError = true
+                                                updateCount++
+                                                checkCompletion()
+                                            }
+                                        }
+                                    } else {
+                                        uploadImage(image)
+                                    }
+                                }
+
+                                // If no updates were needed, return early
+                                if (totalUpdates == 0) {
+                                    onComplete(false, "No changes were made")
+                                }
+                            } else {
+                                onComplete(false, "User not found")
+                            }
+                        }
+                        .addOnFailureListener { e ->
+                            onComplete(false, e.localizedMessage)
+                        }
+                } else {
+                    onComplete(false, error)
+                }
+            }
+
+        } else {
+            onComplete(false, "User email is null")
+        }
+    }
+
+
+    fun uploadImageToCloudinary(
+        bitmap: Bitmap,
+        name: String,
+        onSuccess: (String?) -> Unit,
+        onError: (String?) -> Unit
+    ) {
+        cloudinaryModel.uploadImage(bitmap, name, onSuccess, onError)
+    }
+}
+
+
+
Index: app/src/main/res/layout/fragment_my_profile.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:background=\"#FFFFFF\"\r\n    tools:context=\".ProfileFragment\">\r\n\r\n    <!-- צורה כחולה ברקע -->\r\n    <ImageView\r\n        android:id=\"@+id/imageView\"\r\n        android:layout_width=\"270dp\"\r\n        android:layout_height=\"238dp\"\r\n        android:layout_gravity=\"top|start\"\r\n        android:src=\"@drawable/blue_shape_template\"\r\n        android:scaleType=\"fitXY\" />\r\n\r\n    <!-- תוכן המסך -->\r\n    <ScrollView\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:orientation=\"vertical\"\r\n            android:padding=\"24dp\"\r\n            android:gravity=\"center_horizontal\">\r\n\r\n            <!-- כותרת -->\r\n            <TextView\r\n                android:id=\"@+id/profileTitle\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"My Profile\"\r\n                android:textSize=\"20sp\"\r\n                android:textStyle=\"bold\"\r\n                android:textColor=\"#000000\"\r\n                android:layout_marginBottom=\"16dp\" />\r\n\r\n            <!-- תמונת פרופיל -->\r\n            <FrameLayout\r\n                android:layout_width=\"140dp\"\r\n                android:layout_height=\"140dp\"\r\n                android:layout_marginBottom=\"24dp\">\r\n\r\n                <ImageView\r\n                    android:id=\"@+id/profileImage\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:scaleType=\"centerCrop\"\r\n                    android:padding=\"4dp\"\r\n                    android:background=\"@drawable/circle_white_border\" />\r\n\r\n                <ProgressBar\r\n                    android:id=\"@+id/profileImageProgressBar\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_gravity=\"center\"\r\n                    android:visibility=\"gone\"\r\n                    style=\"?android:attr/progressBarStyleLarge\" />\r\n            </FrameLayout>\r\n\r\n            <!-- שדות -->\r\n            <TextView\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Name\"\r\n                android:textSize=\"14sp\"\r\n                android:textStyle=\"bold\"\r\n                android:textColor=\"#000000\"\r\n                android:layout_marginBottom=\"4dp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/profileName\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"48dp\"\r\n                android:gravity=\"center_vertical\"\r\n                android:paddingStart=\"12dp\"\r\n                android:textColor=\"#000000\"\r\n                android:textSize=\"16sp\"\r\n                android:layout_marginBottom=\"12dp\"\r\n                android:background=\"@drawable/profile_input_bg\" />\r\n\r\n            <TextView\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Email\"\r\n                android:textSize=\"14sp\"\r\n                android:textStyle=\"bold\"\r\n                android:textColor=\"#000000\"\r\n                android:layout_marginBottom=\"4dp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/profileEmail\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"48dp\"\r\n                android:gravity=\"center_vertical\"\r\n                android:paddingStart=\"12dp\"\r\n                android:textColor=\"#000000\"\r\n                android:textSize=\"16sp\"\r\n                android:layout_marginBottom=\"12dp\"\r\n                android:background=\"@drawable/profile_input_bg\" />\r\n\r\n            <TextView\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Phone Number\"\r\n                android:textSize=\"14sp\"\r\n                android:textStyle=\"bold\"\r\n                android:textColor=\"#000000\"\r\n                android:layout_marginBottom=\"4dp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/profileUsername\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"48dp\"\r\n                android:gravity=\"center_vertical\"\r\n                android:paddingStart=\"12dp\"\r\n                android:textColor=\"#000000\"\r\n                android:textSize=\"16sp\"\r\n                android:layout_marginBottom=\"12dp\"\r\n                android:background=\"@drawable/profile_input_bg\" />\r\n\r\n            <TextView\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Date of Birth\"\r\n                android:textSize=\"14sp\"\r\n                android:textStyle=\"bold\"\r\n                android:textColor=\"#000000\"\r\n                android:layout_marginBottom=\"4dp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/profileDate\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"48dp\"\r\n                android:gravity=\"center_vertical\"\r\n                android:paddingStart=\"12dp\"\r\n                android:textColor=\"#000000\"\r\n                android:textSize=\"16sp\"\r\n                android:layout_marginBottom=\"12dp\"\r\n                android:background=\"@drawable/profile_input_bg\" />\r\n\r\n            <TextView\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:text=\"Gender\"\r\n                android:textSize=\"14sp\"\r\n                android:textStyle=\"bold\"\r\n                android:textColor=\"#000000\"\r\n                android:layout_marginBottom=\"4dp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/profileGender\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"48dp\"\r\n                android:gravity=\"center_vertical\"\r\n                android:paddingStart=\"12dp\"\r\n                android:textColor=\"#000000\"\r\n                android:textSize=\"16sp\"\r\n                android:layout_marginBottom=\"24dp\"\r\n                android:background=\"@drawable/profile_input_bg\" />\r\n\r\n            <!-- כפתור עריכה -->\r\n            <Button\r\n                android:id=\"@+id/editButton\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"50dp\"\r\n                android:text=\"Edit\"\r\n                android:textColor=\"#FFFFFF\"\r\n                android:textAllCaps=\"false\"\r\n                android:textSize=\"16sp\"\r\n                android:background=\"@drawable/profile_edit_button_bg\"\r\n                android:layout_marginBottom=\"12dp\" />\r\n\r\n            <!-- כפתור Logout -->\r\n            <Button\r\n                android:id=\"@+id/logoutButton\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"52dp\"\r\n                android:layout_marginBottom=\"16dp\"\r\n                android:backgroundTint=\"#FADBD8\"\r\n                android:drawableLeft=\"@drawable/logout\"\r\n                android:drawablePadding=\"8dp\"\r\n                android:text=\"Log Out\"\r\n                android:textColor=\"#C0392B\" />\r\n        </LinearLayout>\r\n    </ScrollView>\r\n</FrameLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_my_profile.xml b/app/src/main/res/layout/fragment_my_profile.xml
--- a/app/src/main/res/layout/fragment_my_profile.xml	(revision 969dcc3df400da8fa8471f1e22add71e83d5a976)
+++ b/app/src/main/res/layout/fragment_my_profile.xml	(date 1743952105423)
@@ -105,7 +105,7 @@
             <TextView
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
-                android:text="Phone Number"
+                android:text="Username"
                 android:textSize="14sp"
                 android:textStyle="bold"
                 android:textColor="#000000"
